WebIOPi 0.5.x Javascript library

You can use the included Javascript library to build your own interface. You will find an example on the [CUSTOMIZE] page.

<wiki:toc maxdepth="3" />

=webiopi()=
Returns the WebIOPi object instance.

=WebIOPi.ready(callback)=
Register the function to call when WebIOPi is ready.
   (function) callback : function to call

=WebIOPi.setFunction(gpio, func[, callback])=
Set the function on the GPIO.
   (int) gpio : GPIO number from 0 to 53
   (string) func : "IN" or "OUT" or "PWM"
   (function) callback (optional) : function called when result received from the server

=WebIOPi.setValue(gpio, value[, callback])=
Set the output value of a GPIO.
   (int) gpio : GPIO number from 0 to 53
   (int) value : 0 or 1
   (function) callback (optional) : function called when result received from the server

=WebIOPi.toggleValue(gpio)=
Toggle value of a GPIO.
   (int) gpio : GPIO number from 0 to 53

=WebIOPi.callMacro(macro, [args[, callback]])=
Call a macro on the server.
   (string) macro : name of the macro to call
   (string) arg (optional) : array containing arguments
   (function) callback (optional) : function called when result received from the server

=WebIOPi.outputSequence(gpio, period, sequence[, callback])=
Output a bit sequence on a GPIO.
   (int) gpio : GPIO number from 0 to 53
   (int) period : time in ms between each bit
   (string) sequence : bit sequence
   (function) callback (optional) : function called when result received from the server

=WebIOPi.pulse(gpio[, callback])=
Output a single pulse on a GPIO.
   (int) gpio : GPIO number from 0 to 53
   (function) callback (optional) : function called when result received from the server

=WebIOPi.pulseRatio(gpio, ratio[, callback])=
Output a PWM duty cycle ratio on a GPIO.
   (int) gpio : GPIO number from 0 to 53
   (float) ratio : duty cycle from 0.0 to 1.0
   (function) callback (optional) : function called when result received from the server

=WebIOPi.pulseAngle(gpio, angle[, callback])=
Output a PWM angle on a GPIO.
   (int) gpio : GPIO number from 0 to 53
   (int) angle : angle in degree from -45 to +45
   (function) callback (optional) : function called when result received from the server

=WebIOPi.createButton(id, label[, mousedown[, mouseup]])=
Returns a simple button without predefined behavior.
   (string) id : id of the button to create
   (string) label : label of the button
   (function) mousedown (optional) : function called on mousedown/click event
   (function) mouseup (optional) : function called on mouseup event

=WebIOPi.createFunctionButton(gpio)=
Returns a button that change the function of a GPIO.
   (int) gpio : GPIO number from 0 to 53

=WebIOPi.createGPIOButton(gpio, label)=
Returns a button that change the state of a GPIO at each click.
   (int) gpio : GPIO number from 0 to 53
   (string) label : label of the button

=WebIOPi.createMacroButton(id, label, macro, args)=
Returns a button that call a macro on the server.
   (string) id : id of the button to create
   (string) label : label of the button
   (string) macro : name of the macro to call
   (string) args : string arguments

=WebIOPi.createSequenceButton(id, label, gpio, period, sequence)=
Returns a button that output a bit sequence on a GPIO.
   (string) id : id of the button to create
   (string) label : label of the button
   (int) gpio : GPIO number from 0 to 53
   (int) period : time in ms between each bit
   (string) sequence : bit sequence

=WebIOPi.createRatioSlider(gpio, ratio)=
Returns a slider that send its value as a PWM duty cycle ratio
   (int) gpio : GPIO number from 0 to 53
   (float) ratio : slider's init value

=WebIOPi.createAngleSlider(gpio, angle)=
Returns a slider that send its value as a PWM angle
   (int) gpio : GPIO number from 0 to 53
   (int) angle : slider's init value

=WebIOPi.setLabel(id, label)=
Change a label of given button.
   (string) id : id of the button to change
   (string) label : new label of the button