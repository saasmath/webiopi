This page is being updated for the upcoming release. Please refer to the doc included in the WebIOPi 0.3 archive

WebIOPi UI customization is easy but requires some Javascript and CSS knowledge. 

=HTML/Javascript=
The WebIOPi Javascript library allows you to make your own interface easily, only requiring one single script tag to include /webiopi.js

WebIOPi will automatically load and add required jquery.js and webiopi.css into your HTML file at runtime !
Then you can use the [JAVASCRIPT Javascript library] to build the interface, creating buttons and registering callbacks. Check [PYTHON Python example] for the related server script.

This is the included demo/demo.html :
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="viewport" content = "height = device-height, width = 420, user-scalable = no" /> 
	<title>WebIOPi | Demo</title>
	<script type="text/javascript" src="/webiopi.js"></script>
	<link rel="stylesheet" type="text/css" href="demo.css" />
	<script type="text/javascript">
	webiopi().ready(function() {
		var content, button;
		content = $("#content");
			
		// create a "SWITCH" labeled button for GPIO 0
		button = webiopi().createGPIOButton(0, "SWITCH");
		content.append(button); // append button to content div
		               
		// create a "LED" labeled button for GPIO 7
		button = webiopi().createGPIOButton(7, "LED");
		content.append(button); // append button to content div
		       
		// create a button that output a single pulse
		button = webiopi().createPulseButton("pulse", "Pulse", 7);
		content.append(button); // append button to content div
		
		// create a button which output a bit sequence on GPIO 7 with a 100ms period 
		button = webiopi().createSequenceButton("sos", "S.O.S 1", 7, 100, "01010100110011001100101010");
		content.append(button); // append button to content div
		       
		// the previous button will always output the same sequence
		// you can also create a simple button with your own function 
		button = webiopi().createButton("sos2", "S.O.S 2", outputSequence);
		content.append(button); // append button to content div
		
		// create a button which call myMacro with "1,2,3" as argument
		button = webiopi().createMacroButton("macro", "Macro 1", "myMacro", "1,2,3");
		content.append(button); // append button to content div
		
		// the previous button will always call myMacro with the same "1,2,3" argument
		// you can also create a simple button with your own function 
		button = webiopi().createButton("macro2", "Macro 2", callMacro);
		content.append(button); // append button to content div
		
		// you can also create a button which calls a different function for mouse down and up events
		button = webiopi().createButton("hold", "Hold", mousedown, mouseup);
		content.append(button);
		
		// Only for Chrome and Safari, create a slider that pulse out a 0-100% duty cycle ratio on GPIO 8
		button = webiopi().createRatioSlider(8, 0.5); // initialized to 50% duty cycle ratio
		content.append(button);
		       
		// Only for Chrome and Safari, create a slider that pulse out a -45 to +45° angle on GPIO 9
		button = webiopi().createAngleSlider(9, 0); // initialized to 0° (neutral)
		content.append(button);
	});
		
	function mousedown() {
		webiopi().setValue(7, 1);
	}
	
	function mouseup() {
		webiopi().setValue(7, 0);
	}
	
	function outputSequence() {
		var sequence = "01010100110011001100101010" // S.O.S. morse code or whatever you want
		// output sequence on gpio 7 with a 100ms period
		webiopi().outputSequence(7, 100, sequence, sequenceCallback);
	}
	
	function sequenceCallback(gpio, data) {
		alert("sequence on " + gpio + " finished with " + data);
	}
	
	function callMacro() {
		var arg = "1,2,3" // or whatever you want
		// call myMacro(arg)
		webiopi().callMacro("myMacro", arg, macroCallback);
	}
	
	function macroCallback(macro, args, data) {
		alert(macro + " returned with " + data);
	}
	
	</script>
</head>
<body>
<div id="content" align="center"></div>
</body>
</html>


=CSS styling=
Once you wrote your HTML file with your Javascript code, you may want to add some CSS rules, in order change colors, size, positioning... It's very simple as you follow the naming convention to write your CSS file.

Pin state buttons (LOW/HIGH) are HTML input[type="submit"], and inherit the input CSS style. Their id are from gpio0 to gpio53. There is also two classes for both low and high states, and also somes for non GPIO pins :
   LOW : GPIO in low state
   HIGH : GPIO in high state
   GND : Ground
   V33 : 3.3V
   V50 : 5.0V
   UART0
   SPI0
   I2C0
   I2C1
   Button : Generic buttons

With the included RPi header and expert webapps, you can also customize function button and descriptions :

Pin function buttons (IN/OUT/...) are also HTML input[type="submit"], with id from function0 to function53. Two classes are also used :
   .FunctionBasic : Used when GPIO is Input or Output
   .FunctionSpecial : Used when GPIO is in ALTx (default is hidden)

Pin descriptions are made of HTML div, with id from name0 to name53, with a single class :
   .Description : Text on the left/right of each pin

Included demo/demo.css :
@CHARSET "UTF-8";

input {
	display: block;
	margin: 5px 5px 5px 5px;
	width: 150px;
	height: 60px;
	font-size: 24pt;
	font-weight: bold;
	color: black;
}

#gpio7.LOW {
	background-color: White;
}

#gpio7.HIGH {
	background-color: Red;
}

Will display big buttons arranged in a column. It also changes the background color of the GPIO 7 for both low and high states.


Start the associated demo.py script in the demo folder then open a browser to http://raspberrypi/webiopi/demo.html