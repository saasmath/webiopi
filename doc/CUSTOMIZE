This page is being updated for the upcoming release. Please refer to the doc included in the WebIOPi 0.3 archive

WebIOPi UI customization is easy but requires some JS and CSS knowledge. 

=HTML/Javascript=
The WebIOPi Javascript library allows you to make your own interface easily, only requiring one single script tag to include /webiopi.js

WebIOPi will automatically load and add required jquery.js and webiopi.css into your HTML file at runtime !
Then you can use the [JAVASCRIPT] library to build the interface, creating buttons and registering callbacks. Check [PYTHON] for the related demo.py script with server macro example.

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta name="viewport" content = "height = device-height, width = 420, user-scalable = no" /> 
	<title>WebIOPi | Demo</title>
	<script type="text/javascript" src="/webiopi.js"></script>
	<link rel="stylesheet" type="text/css" href="demo.css" />
	<script type="text/javascript">
	webiopi().ready(function() {
		//if you use the default server, you have to setup GPIO from javascript
		webiopi().setFunction(7, "OUT"); 
		
		var content, button;
		content = $("#content");
		
		 // create a "SWITCH" labeled button for GPIO 0
	        button = webiopi().createGPIOButton(0, "SWITCH");
        	content.append(button); // append button to content div
                
		 // create a "LED" labeled button for GPIO 7
	        button = webiopi().createGPIOButton(7, "LED");
	        content.append(button); // append button to content div
        
        	// create a button which output a bit sequence on GPIO 7 : 010 with a 10ms period 
	        button = webiopi().createSequenceButton("pulse", "|", 7, 10, "010");
	        content.append(button); // append button to content div
        
        	// the previous button will always output "010" sequence
	        // you can also create a simple button with your own function 
        	button = webiopi().createButton("sos", "S.O.S", outputSequence);
	        content.append(button); // append button to content div

        	// you can also create a button which calls a different function for mouse down and up events
	        button = webiopi().createButton("button", "FLASH", mousedown, mouseup);
        	content.append(button);
        
	        // create a button which call "myMacro" with "1,2,3" as argument
        	button = webiopi().createMacroButton("macro", "Macro", "myMacro", "1,2,3");
	        content.append(button); // append button to content div

        	// the previous button will always call "myMacro" with the same "1,2,3" argument
	        // you can also create a simple button with your own function 
        	button = webiopi().createButton("macro2", "Macro", callMacro);
	        content.append(button); // append button to content div
	});
	
	function mousedown() {
		webiopi().setValue(7, 1);
	}
	
	function mouseup() {
		webiopi().setValue(7, 0);
	}
	
	function outputSequence() {
		var sequence = "01010100110011001100101010" // S.O.S. morse code or whatever you want
		// output sequence on gpio 7 with a 100ms period
        	webiopi().outputSequence(7, 100, sequence, sequenceCallback);
	}
	
	function sequenceCallback(gpio, data) {
	    	alert("sequence on " + gpio + " finished with " + data);
    	}
	
	function callMacro() {
		var arg = "1,2,3" // or whatever you want
		// call myMacro(arg)
        	webiopi().callMacro("myMacro", arg, macroCallback);
	}
	
	function macroCallback(macro, args, data) {
    		alert(macro + " returned with " + data);
    	}
	</script>
</head>
<body>
<div id="content" align="center"></div>
</body>
</html>


=CSS naming=
RPi pins buttons are html inputs (type=submit), and inherit the input CSS style. Their id are from gpio0 to gpio53. There is also two classes for both low and high states, and also somes for non GPIO pins :
   .LOW : GPIO in low state
   .HIGH : GPIO in high state
   .DNC : Do not connect
   .GND : Ground
   .V33 : 3.3V
   .V50 : 5.0V
   .UART0
   .SPI0
   .I2C0
   .I2C1

RPi pins Functions buttons are also html inputs, with id from function0 to function53. Two classes are also used :
   .FunctionBasic : When GPIO is Input or Output
   .FunctionSpecial : When GPIO is in ALTx (default hidden)

RPi pins descriptions are made of html div, id from name0 to name53, with a single class :
   .Description : Text on the left/right of each pin

=Example=
Included demo/demo.css :
@CHARSET "UTF-8";

input {
	display: block;
	margin: 5px 5px 5px 5px;
	width: 150px;
	height: 60px;
	font-size: 24pt;
	font-weight: bold;
	color: black;
}

#gpio7.LOW {
	background-color: White;
}

#gpio7.HIGH {
	background-color: Red;
}

will display the GPIOs 0 and 7, with two bigs buttons in the upper-left corner. It also changes the background color of the GPIO 7 for both low and high states.


Start the associated demo.py script then open a browser to http://raspberrypi/webiopi/demo.html