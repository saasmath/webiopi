[GPIO]
# Initialize following GPIOs with given function and optional value
# This is used during WebIOPi start process
#21 = IN
#23 = OUT 0
#24 = OUT 0
#25 = OUT 1

#------------------------------------------------------------------------#

[~GPIO]
# Reset following GPIOs with given function and optional value
# This is used at the end of WebIOPi stop process
#21 = IN
#23 = IN
#24 = IN
#25 = OUT 0

#------------------------------------------------------------------------#

[SCRIPTS]
# Load custom scripts syntax :
# name = sourcefile
#   each sourcefile may have setup, loop and destroy functions and macros
#myscript = /home/pi/webiopi/examples/scripts/macros/script.py

#------------------------------------------------------------------------#

[HTTP]
# HTTP Server configuration
enabled = true
port = 8000

# File containing sha256(base64("user:password"))
# Use webiopi-passwd command to generate it
passwd-file = /etc/webiopi/passwd

# Use doc-root to change default HTML and resource files location
#doc-root = /home/pi/webiopi/examples/scripts/macros

# Use welcome-file to change the default "Welcome" file
#welcome-file = index.html

#------------------------------------------------------------------------#

[COAP]
# CoAP Server configuration
enabled = true
port = 5683
# Enable CoAP multicast
multicast = true

#------------------------------------------------------------------------#

[SERIAL]
# Serial lines configuration syntax:
# name = device baudrate
#   name     : used in the URL mapping
#   device   : tty device name
#   baudrate : serial speed from 9600 to 115200
# All tty devices configured here are mapped on REST API /serial/name

# Raspberry native UART on GPIO, uncomment to enable
# Don't forget to remove console on ttyAMA0 in /boot/cmdline.txt
# And also disable getty on ttyAMA0 in /etc/inittab
#serial0 = ttyAMA0 9600

# USB serial adapters
#usb0 = ttyUSB0 9600
#usb1 = ttyACM0 9600

#------------------------------------------------------------------------#

[DEVICES]
# Specific device configuration syntax:
# name = device [args...]
#   name   : used in the URL mapping
#   device : device name
#   args   : (optional) see device driver doc
# If enabled, devices configured here are mapped on REST API /device/name
# Devices are also accessible in custom scripts using deviceInstance(name)
# See device driver doc for methods and URI scheme available

#temp0 = TMP102
#temp1 = TMP102 0x49
#temp2 = OneWireTemp
#temp3 = OneWireTemp 28-0000049bc218

#expander0 = PCF8574
#expander1 = PCF8574 0x21

#adc = MCP3208
#dac = MCP4922 1

#------------------------------------------------------------------------#

[REST]
# By default, REST API allows to GET/POST on all GPIOs
# Use gpio-export to limit GPIO available through REST API  
#gpio-export = 21, 23, 24, 25

# Uncomment to forbid changing GPIO values 
#gpio-post-value = false

# Uncomment to forbid changing GPIO functions 
#gpio-post-function = false 

# Uncomment to disable automatic device mapping
#device-mapping = false

#------------------------------------------------------------------------#

[ROUTES]
# Custom REST API route syntax :
# source = destination
#   source      : URL to route
#   destination : Resulting URL
# Adding routes allows to simplify access with Human comprehensive URLs

# In the next example with have the bedroom light connected to GPIO 25
# and a temperature sensor named temp2, defined in [DEVICES] section
#  - GET  /bedroom/light       => GET  /GPIO/25/value, returns the light state
#  - POST /bedroom/light/0     => POST /GPIO/25/value/0, turn off the light
#  - POST /bedroom/light/1	   => POST /GPIO/25/value/1, turn on the light
#  - GET  /bedroom/temperature => GET  /device/temp2/temperature, returns the temperature
#/bedroom/light = /GPIO/25/value
#/bedroom/temperature = /device/temp2/temperature

#/livingroom/light = /device/expander0/0
#/livingroom/brightness = /device/adc/0/float
#/livingroom/temperature = /device/temp0/temperature
